#pragma once

#include "regfile.h"
#include <climits>

#define RV_NUM_REGS 32

// struct riscv_t {
//     bool halt;
//
//     // io interface
//     struct riscv_io_t io;
//
//     // integer registers
//     riscv_word_t X[RV_NUM_REGS];
//     riscv_word_t PC;
//
//     // user provided data
//     riscv_user_t userdata;
//
//     // csr registers
//     uint64_t csr_cycle;
//     uint32_t csr_mstatus;
//     uint32_t csr_mtvec;
//     uint32_t csr_misa;
//     uint32_t csr_mtval;
//     uint32_t csr_mcause;
//     uint32_t csr_mscratch;
//     uint32_t csr_mepc;
//     uint32_t csr_mip;
//     uint32_t csr_mbadaddr;
//
//     // current instruction length
//     uint8_t inst_len;
// };

// clang-format off
// instruction decode masks
enum {
    //                 987654321'987654321'9876543210
    INST_6_2     = 0b00000000000000000000000001111100,
    //                 987654321'987654321'9876543210
    FR_OPCODE    = 0b00000000000000000000000001111111, // r-type
    FR_RD        = 0b00000000000000000000111110000000,
    FR_FUNCT3    = 0b00000000000000000111000000000000,
    FR_RS1       = 0b00000000000011111000000000000000,
    FR_RS2       = 0b00000001111100000000000000000000,
    FR_FUNCT7    = 0b11111110000000000000000000000000,
    //                 987654321'987654321'9876543210
    FI_IMM_11_0  = 0b11111111111100000000000000000000, // i-type
    //                 987654321'987654321'9876543210
    FS_IMM_4_0   = 0b00000000000000000000111110000000, // s-type
    FS_IMM_11_5  = 0b11111110000000000000000000000000,
    //                 987654321'987654321'9876543210
    FB_IMM_11    = 0b00000000000000000000000010000000, // b-type
    FB_IMM_4_1   = 0b00000000000000000000111100000000,
    FB_IMM_10_5  = 0b01111110000000000000000000000000,
    FB_IMM_12    = 0b10000000000000000000000000000000,
    //                 987654321'987654321'9876543210
    FU_IMM_31_12 = 0b11111111111111111111000000000000, // u-type
    //                 987654321'987654321'9876543210
    FJ_IMM_19_12 = 0b00000000000011111111000000000000, // j-type
    FJ_IMM_11    = 0b00000000000100000000000000000000,
    FJ_IMM_10_1  = 0b01111111111000000000000000000000,
    FJ_IMM_20    = 0b10000000000000000000000000000000,
    //                 987654321'987654321'9876543210
    FR4_FMT      = 0b00000110000000000000000000000000, // r4-type
    FR4_RS3      = 0b11111000000000000000000000000000,
    //                 987654321'987654321'9876543210
    FC_OPCODE    = 0b00000000000000000000000000000011, // compressed-instuction
    FC_FUNC3     = 0b00000000000000001110000000000000,
    //                 987654321'987654321'9876543210
    FC_RS1C      = 0b00000000000000000000001110000000,
    FC_RS2C      = 0b00000000000000000000000000011100,
    FC_RS1       = 0b00000000000000000000111110000000,
    FC_RS2       = 0b00000000000000000000000001111100,
    //                 987654321'987654321'9876543210
    FC_RDC       = 0b00000000000000000000000000011100,
    FC_RD        = 0b00000000000000000000111110000000,
    //                 987654321'987654321'9876543210
    FC_IMM_12_10 = 0b00000000000000000001110000000000, // CL,CS,CB
    FC_IMM_6_5   = 0b00000000000000000000000001100000,
    //                 987654321'987654321'9876543210
    FCI_IMM_12   = 0b00000000000000000001000000000000, 
    FCI_IMM_6_2  = 0b00000000000000000000000001111100,
    //                 987654321'987654321'9876543210
    FCSS_IMM     = 0b00000000000000000001111110000000,
    //                 987654321'987654321'9876543210
    FCJ_IMM      = 0b00000000000000000001111111111100,
    //                 987654321'987654321'9876543210
};
// clang-format off


enum class InstLen : int {
    INST_UNKNOWN = 0,
    INST_16 = 2,
    INST_32 = 4,
};


