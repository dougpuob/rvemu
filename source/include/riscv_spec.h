#pragma once

#include <climits>

#define RV_NUM_REGS 32

// struct riscv_t {
//     bool halt;
//
//     // io interface
//     struct riscv_io_t io;
//
//     // integer registers
//     riscv_word_t X[RV_NUM_REGS];
//     riscv_word_t PC;
//
//     // user provided data
//     riscv_user_t userdata;
//
//     // csr registers
//     uint64_t csr_cycle;
//     uint32_t csr_mstatus;
//     uint32_t csr_mtvec;
//     uint32_t csr_misa;
//     uint32_t csr_mtval;
//     uint32_t csr_mcause;
//     uint32_t csr_mscratch;
//     uint32_t csr_mepc;
//     uint32_t csr_mip;
//     uint32_t csr_mbadaddr;
//
//     // current instruction length
//     uint8_t inst_len;
// };

// clang-format off
// instruction decode masks
enum {
    //                 987654321'987654321'9876543210
    INST_6_2     = 0b00000000000000000000000001111100,
    //                 987654321'987654321'9876543210
    FR_OPCODE    = 0b00000000000000000000000001111111, // r-type
    FR_RD        = 0b00000000000000000000111110000000,
    FR_FUNCT3    = 0b00000000000000000111000000000000,
    FR_RS1       = 0b00000000000011111000000000000000,
    FR_RS2       = 0b00000001111100000000000000000000,
    FR_FUNCT7    = 0b11111110000000000000000000000000,
    //                 987654321'987654321'9876543210
    FI_IMM_11_0  = 0b11111111111100000000000000000000, // i-type
    //                 987654321'987654321'9876543210
    FS_IMM_4_0   = 0b00000000000000000000111110000000, // s-type
    FS_IMM_11_5  = 0b11111110000000000000000000000000,
    //                 987654321'987654321'9876543210
    FB_IMM_11    = 0b00000000000000000000000010000000, // b-type
    FB_IMM_4_1   = 0b00000000000000000000111100000000,
    FB_IMM_10_5  = 0b01111110000000000000000000000000,
    FB_IMM_12    = 0b10000000000000000000000000000000,
    //                 987654321'987654321'9876543210
    FU_IMM_31_12 = 0b11111111111111111111000000000000, // u-type
    //                 987654321'987654321'9876543210
    FJ_IMM_19_12 = 0b00000000000011111111000000000000, // j-type
    FJ_IMM_11    = 0b00000000000100000000000000000000,
    FJ_IMM_10_1  = 0b01111111111000000000000000000000,
    FJ_IMM_20    = 0b10000000000000000000000000000000,
    //                 987654321'987654321'9876543210
    FR4_FMT      = 0b00000110000000000000000000000000, // r4-type
    FR4_RS3      = 0b11111000000000000000000000000000,
    //                 987654321'987654321'9876543210
    FC_OPCODE    = 0b00000000000000000000000000000011, // compressed-instuction
    FC_FUNC3     = 0b00000000000000001110000000000000,
    //                 987654321'987654321'9876543210
    FC_RS1C      = 0b00000000000000000000001110000000,
    FC_RS2C      = 0b00000000000000000000000000011100,
    FC_RS1       = 0b00000000000000000000111110000000,
    FC_RS2       = 0b00000000000000000000000001111100,
    //                 987654321'987654321'9876543210
    FC_RDC       = 0b00000000000000000000000000011100,
    FC_RD        = 0b00000000000000000000111110000000,
    //                 987654321'987654321'9876543210
    FC_IMM_12_10 = 0b00000000000000000001110000000000, // CL,CS,CB
    FC_IMM_6_5   = 0b00000000000000000000000001100000,
    //                 987654321'987654321'9876543210
    FCI_IMM_12   = 0b00000000000000000001000000000000, 
    FCI_IMM_6_2  = 0b00000000000000000000000001111100,
    //                 987654321'987654321'9876543210
    FCSS_IMM     = 0b00000000000000000001111110000000,
    //                 987654321'987654321'9876543210
    FCJ_IMM      = 0b00000000000000000001111111111100,
    //                 987654321'987654321'9876543210
};
// clang-format off


enum class InstLen : int {
    INST_UNKNOWN = 0,
    INST_16 = 2,
    INST_32 = 4,
};



// RISC-V register filesenum 
enum RvReg { 
    x0=0, x1,  x2,  x3,  x4,  x5,  x6,  x7,  /*00-07*/
    x8,   x9,  x10, x11, x12, x13, x14, x15, /*09-15*/
    x16,  x17, x18, x19, x20, x21, x22, x23, /*16-23*/
    x24,  x25, x26, x27, x28, x29, x30, x31, /*24-31*/
    f0,   f1,  f2,  f3,  f4,  f5,  f6,  f7f, /*32-39*/
    f8,   f9,  f10, f11, f12, f13, f14, f15, /*40-47*/
    f16,  f17, f18, f19, f20, f21, f22, f23, /*48-55*/
    f24,  f25, f26, f27, f28, f29, f30, f31  /*56-63*/
};

enum AbiName {
  zero = RvReg::x0,
  ra = RvReg::x1, 
  sp = RvReg::x2, 
  gp = RvReg::x3, 
  tp = RvReg::x4, 
  t0 = RvReg::x5, 
  t1 = RvReg::x6, 
  t2 = RvReg::x7, 
  s0 = RvReg::x8,
  s1 = RvReg::x9,
  a0 = RvReg::x10,
  a1 = RvReg::x11,
  a2 = RvReg::x12,
  a3 = RvReg::x13,
  a4 = RvReg::x14,
  a5 = RvReg::x15,
  a6 = RvReg::x16,
  a7 = RvReg::x17,
  s2 = RvReg::x18,
  s3 = RvReg::x19,
  s4 = RvReg::x20,
  s5 = RvReg::x21,
  s6 = RvReg::x22,
  s7 = RvReg::x23,
  s8 = RvReg::x24,
  s9 = RvReg::x25,
  s10 = RvReg::x26,
  s11 = RvReg::x27,
  t3 = RvReg::x28,
  t4 = RvReg::x29,
  t5 = RvReg::x30,
  t6 = RvReg::x31,
};

